{\rtf1\mac\ansicpg10000\cocoartf871
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\viewkind0
\deftab720
\pard\pardeftab720\sl300\sb240\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 Saint PHP Framework\
\pard\pardeftab720\sl300\sb120\ql\qnatural\pardirnatural

\fs24 \cf0 Overview\
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural

\b0 \cf0 Saint is a PHP web-application framework for quickly developing database-backed web applications using the model-view-controller design pattern. Using Saint it is possible to create sophisticated web applications with a minimum of developer overhead and a maximum of flexibility.\
Saint is heavily inspired by the methodologies found in the ruby on rails framework. As such, a good resource at this time is any one of the numerous tutorials about ruby on rails. The basics of the framework consist of a single front controller which handles the forwarding of requests to the appropriate controller classes by using a url mapping. \
\pard\pardeftab720\sl300\sb120\ql\qnatural\pardirnatural

\b \cf0 Application Layout\
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural

\b0 \cf0 A basic Saint application consists of a number of directories typically stored in the level above the live web directory:\
\pard\pardeftab720\sl120\sa240\ql\qnatural\pardirnatural

\f1\fs20 \cf0 app\
\pard\tx270\pardeftab720\sl120\sa240\ql\qnatural\pardirnatural
\cf0 	controllers\
	helpers\
	models\
	views\
\pard\pardeftab720\sl120\sa240\ql\qnatural\pardirnatural
\cf0 config\
db\
plugins\
html\
scripts\
\pard\pardeftab720\sl120\sa240\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural
\cf0 The MVC elements are organized in the app directory, and all configuration files are in config.\
\pard\pardeftab720\sl300\sb120\ql\qnatural\pardirnatural

\b \cf0 Configuration\
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural

\b0 \cf0 Saint requires a very minimal amount of configuration. database.php contains the parameters for accessing the database and urls.php contains the url mappings used by the front-controller.\
\pard\pardeftab720\sl300\sb120\ql\qnatural\pardirnatural

\b \cf0 Request Flow\
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural

\b0 \cf0 The front controller (dispatch.php) intercepts requests and determines the correct controller class and action. The standard url mapping is: /controller/action/parameters. These mappings can be further modified in the config/urls.php file. Once the controller is found and loaded, the correct action method on the controller is executed. The controller methods hold the core lookups for a given "page". When the action has finished execution, the correct view class is instantiated and interpreted then sent to the browser. View templates are located in the app/views directory. There are a few different template formats available. All views should be in a directory with the same name as the controller, in a file with the same name as the action, and end with a valid template extension. the .phtml extension will treat the contents as valid in-line php. the .pxml extension will let you output xml served with the correct mime type. Finally the .xsl causes the framework to treat the controller variables as XML and perform a XSLT operation to produce the HTML.\
Any instance variables on the controller class are made available to the phtml and pxml views as local variables. For instance if you set $this->foo = "bar" in an action method, this variable will be available in the template as $foo.\
\pard\pardeftab720\sl300\sb120\ql\qnatural\pardirnatural

\b \cf0 File Locations\
\pard\pardeftab720\sl300\sa240\ql\qnatural\pardirnatural

\b0 \cf0 As is apparent from the application layout, the bulk of code for a site is located in the \'d3app\'d3 directory. All controllers are located in the \'d2controllers\'d3 directory. These controllers are primarily responsible for handling the incoming request, loading data from the database (using the model objects from models) and setting variables used by the views. Each method on the controller corresponds to an action from the url. Methods which are accessible as actions are prefixed with an underscore character. For example the index action for a controller (executed automatically which only a controller name, but not an action, is specified) is named _index. \
All view templates are located in the \'d2views\'d3 directory, which contains a sub-directory for each controller. Inside these sub-directories are template files for each action. For instance, the template for the index action of the home controller is located at /app/views/home/index.phtml\
}
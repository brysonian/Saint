<?php

	require_once (SAINT_ROOT."/saint.php");


// ===========================================================
// - LIB
// ===========================================================
	require_once (SAINT_ROOT."/scripts/shell_lib");

	# set the exception format
	SaintException::set_log_format('text');


// ===========================================================
// - MAIN
// ===========================================================
	$argv = $_SERVER['argv'];
	array_shift($argv);

	# see how many args there are
	if (count($argv) == 0) {
		error("Please specify the name of what you would like to generate. Or a name and object type.");
	}

	# if there's only one, generate the model
	# and controller using the arg as the base name
	# see what we are generating
	switch($argv[0]) {
		case 'model':
			if (count($argv) == 1)
				error("Please specify the name of the model you would like to generate.");
			else
				create_model($argv[1]);
			break;

		case 'controller':
			if (count($argv) == 1)
				error("Please specify the name of the controller you would like to generate.");
			else
				create_controller($argv[1]);
			break;

		case 'scaffold':
			if (count($argv) == 1)
				error("Please specify the name of the scaffold you would like to generate.");
			else
				create_model($argv[1]);
				#create_controller($argv[1], true);
				create_view_folder($argv[1]);
				create_scaffold($argv[1], true);
			break;

		case 'view':
			if (count($argv) == 1)
				error("Please specify the name of the scaffold you would like to generate.");
			else
				create_scaffold($argv[1], true);
			break;

		default:
			if (count($argv) == 1) {
				create_model($argv[0]);
				create_controller($argv[0]);
				create_view_folder($argv[0]);
			}
			break;
	}

	display_errors();





// ===========================================================
// - FUNCTIONS
// ===========================================================
	function create_model($name) {
		$cname = ucfirst($name);
		$code = "<?php\n\nclass $cname extends DBRecord \n{\n\tfunction init() {\n\t\t\n\t}\n}\n\n?>";
		write_script('app/models', $cname, $code);
		
	}

	function create_controller($name, $scafolding=false) {
		$mname = ucfirst($name);
		$cname = $mname.'Controller';
		if ($scafolding) {
			$code = "<?php\n\nclass $cname extends AppController\n{\n\tfunction _index() {\n\t\t\$this->items = $mname::find_all();\n\t}\n\n\tfunction _show() {\n\t\t\$this->item = $mname::find(params('uid'));\n\t}\n\n\tfunction _new() {}\n\n\tfunction _create() {\n\t\t\$obj = new $mname();\n\n\t\tforeach(\$_POST as \$k => \$v) {\n\t\t\tif (\$k == 'submit') continue;\n\t\t\tif (!empty(\$v)) \$obj->\$k = \$v;\n\t\t}\n\t\ttry {\n\t\t\t\$obj->save();\n\t\t\tredirect_to(false);\n\t\t} catch (ValidationException \$e) {\n\t\t\tdie((\$e->log()));\n\t\t}\n\t}\n\n\n}\n\n?>";
		} else {
			$code = "<?php\n\nclass $cname extends AppController\n{\n\t\n}\n\n?>";
		}
		write_script('app/controllers', $cname, $code);
	}
	
	function create_view_folder($name) {
		safe_mkdir(strtolower("app/views/$name"));
	}
	
	function create_scaffold($name, $controller=false) {
		$path = strtolower("app/views/$name");
				
		#list
		write_scaffold_template('list', $name, $path);
		
		#show
		write_scaffold_template('show', $name, $path);
		
		#edit
		write_scaffold_template('edit', $name, $path);
		
		#new
		write_scaffold_template('new', $name, $path);
		
		# make the form
		$form = create_scaffold_form(strtolower($name));
		write_file("$path/_form.phtml", $form);

		# write the css
		safe_mkdir("public/_css");
		safe_copy(SAINT_ROOT."/templates/scaffold/css/scaffold.css", "public/_css/scaffold.css");

		if ($controller) {
			$t = str_replace(
				array(':object',':Object'),
				array(strtolower($name), ucfirst($name)),
				file_get_contents(SAINT_ROOT."/templates/scaffold/controllers/Controller.php"));
			write_file("app/controllers/".ucfirst($name)."Controller.php", $t);
		}
	}
	
	function write_scaffold_template($template, $name, $path) {	
		$t = str_replace(':object', strtolower($name), file_get_contents(SAINT_ROOT."/templates/scaffold/views/$template.phtml"));
		write_file("$path/$template.phtml", $t);
	}


	function create_scaffold_form($name) {
		$mname = ucfirst($name);
		
		$obj = new $mname;
		$info = $obj->table_info(false, true);

		# get the html for each element
		ob_start();
		echo '<'.'?'.'php'." echo \$$name"."->errors(); ?".'>'."\n<ul>\n";

		foreach($info as $k => $v) {
			$type = $v['Type'];
			$field = $v['Field'];
			
			switch (true) {
				case ($field == 'id'):
				case ($field == 'uid'):
					break;
				
				# fk relationships
				case (strpos($field, '_uid') !== false):
					echo str_replace(
						array(':field', ':Field', ':object'), 
						array($field, str_replace('_uid','',ucfirst($field)), strtolower($name)),
						file_get_contents(SAINT_ROOT."/templates/scaffold/views/__toone.phtml"));
					break;
				
				case (strpos($type, 'varchar')!==false):
					# if it's less than 100 use a line, otherwise use a small textarea
					$m = array();
					preg_match('/varchar\(([0-9]+)\)/', $type, $m);
					$temp = ($m[1]>100)?'__varchar255':'__varchar100';
					
					echo str_replace(
						array(':field', ':Field', ':object'), 
						array($field, str_replace('_', ' ', ucfirst($field)), strtolower($name)),
						file_get_contents(SAINT_ROOT."/templates/scaffold/views/$temp.phtml"));
					break;
					
				case ($type == 'text'):
				case ($type == 'date'):
				case ($type == 'datetime'):
				case ($type == 'time'):
					echo str_replace(
						array(':field', ':Field', ':object'), 
						array($field, str_replace('_', ' ', ucfirst($field)), strtolower($name)),
						file_get_contents(SAINT_ROOT."/templates/scaffold/views/__".strtolower($type).".phtml"));
					break;
											
			}
		}
		echo "\n</ul>";

		return ob_get_clean();
	}
		
?>


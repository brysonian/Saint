<?php

	require_once (SAINT_ROOT."/saint.php");


// ===========================================================
// - LIB
// ===========================================================
# errors
#	require_once (SAINT_ROOT."/error_codes.php");
#	require_once (SAINT_ROOT."/error_messages.php");


// ===========================================================
// - MAIN
// ===========================================================
	$argv = $_SERVER['argv'];
	array_shift($argv);

	# see how many args there are
	if (count($argv) == 0) {
		error("Please specify the name of what you would like to generate. Or a name and object type.");
	}

	# if there's only one, generate the model
	# and controller using the arg as the base name
	# see what we are generating
	switch($argv[0]) {
		case 'model':
			if (count($argv) == 1)
				error("Please specify the name of the model you would like to generate.");
			else
				create_model($argv[1]);
			break;

		case 'controller':
			if (count($argv) == 1)
				error("Please specify the name of the controller you would like to generate.");
			else
				create_controller($argv[1]);
			break;

		case 'scaffold':
			if (count($argv) == 1)
				error("Please specify the name of the scaffold you would like to generate.");
			else
				create_model($argv[1]);
				create_controller($argv[1], true);
				create_view_folder($argv[1]);
				create_scaffold($argv[1]);
			break;

		case 'view':
			if (count($argv) == 1)
				error("Please specify the name of the scaffold you would like to generate.");
			else
				create_scaffold($argv[1]);
			break;

		default:
			if (count($argv) == 1) {
				create_model($argv[0]);
				create_controller($argv[0]);
				create_view_folder($argv[0]);
			}
			break;
	}

	display_errors();





// ===========================================================
// - FUNCTIONS
// ===========================================================
	function create_model($name) {
		$cname = ucfirst($name);
		$code = "<?php\n\nclass $cname extends DBRecord \n{\n\tfunction init() {\n\t\t\n\t}\n}\n\n?>";
		write_script('app/models', $cname, $code);
		
	}

	function create_controller($name, $scafolding=false) {
		$mname = ucfirst($name);
		$cname = $mname.'Controller';
		if ($scafolding) {
			$code = "<?php\n\nclass $cname extends AppController\n{\n\tfunction _index() {\n\t\t\$this->items = $mname::find_all();\n\t}\n\n\tfunction _show() {\n\t\t\$this->item = $mname::find(params('uid'));\n\t}\n\n\tfunction _new() {}\n\n\tfunction _create() {\n\t\t\$obj = new $mname();\n\n\t\tforeach(\$_POST as \$k => \$v) {\n\t\t\tif (\$k == 'submit') continue;\n\t\t\tif (!empty(\$v)) \$obj->\$k = \$v;\n\t\t}\n\t\ttry {\n\t\t\t\$obj->save();\n\t\t\tredirect_to(false);\n\t\t} catch (ValidationException \$e) {\n\t\t\tdie((\$e->log()));\n\t\t}\n\t}\n\n\n}\n\n?>";
		} else {
			$code = "<?php\n\nclass $cname extends AppController\n{\n\t\n}\n\n?>";
		}
		write_script('app/controllers', $cname, $code);
	}
	
	function create_view_folder($name) {
		safe_mkdir(strtolower("app/views/$name"));
	}
	
	function create_scaffold($name) {
		$path = strtolower("app/views/$name");
		copy(SAINT_ROOT.'/templates/scaffold/index.phtml', "$path/index.phtml");
		copy(SAINT_ROOT.'/templates/scaffold/show.phtml', "$path/show.phtml");
		
		$html = create_new_scaffold($name);
		$f = fopen("$path/new.phtml", 'w');
		fwrite($f, $html);
		fclose($f);

	}


	function create_new_scaffold($name) {
		$mname = ucfirst($name);
		
		$obj = new $mname;
		$info = $obj->table_info();

		# get the html for each element
		$elements = '';
		foreach($info as $k => $v) {
			$type = $v['Type'];
			$field = $v['Field'];
			
			switch (true) {
				case ($field == 'id'):
				case ($field == 'uid'):
					break;
				
				# fk relationships
				case (strpos($field, '_uid') !== false):
					break;
				
				case (strpos($type, 'varchar')!==false):
					# if it's less than 100 use a line, otherwise use a small textarea
					$m = array();
					preg_match('/varchar\(([0-9]+)\)/', $type, $m);
					$temp = ($m[1]>100)?'_varchar255':'_varchar100';
					
					ob_start();
					include (SAINT_ROOT."/templates/scaffold/$temp.phtml");
					$elements .= ob_get_clean();						
					break;
					
				case ($type == 'text'):
				case ($type == 'date'):
				case ($type == 'datetime'):
				case ($type == 'time'):
					ob_start();
					include (SAINT_ROOT.'/templates/scaffold/_'.strtolower($type).'.phtml');
					$elements .= ob_get_clean();
					break;
											
			}
		}

		ob_start();
		include (SAINT_ROOT.'/templates/scaffold/new.phtml');
		$html = ob_get_clean();						

		return $html;
	}


// ===========================================================
// - HELPERS
// ===========================================================
	$errors = array();
	function error($msg, $fatal=false) {
		global $errors;
		$errors[] = $msg;
		if ($fatal) {
			display_errors();
			die();
		}
	}
	
	function display_errors() {
		global $errors;
		if (empty($errors)) return;
		echo "\n+----------------------------+\n";
		echo "|     SAINT some errors:     |\n";
		echo "+----------------------------+\n";
		echo(join("\n", $errors)."\n\n\n");
	}

	function write_script($dir, $cname, $code) {
		if (file_exists("$dir/$cname.php")) {
			error("Failed to create $dir/$cname file already exists.");
		} else {
			echo "Create: $dir/$cname\n";
			safe_mkdir($dir);
			$fp = fopen("$dir/$cname.php", "w");
			fwrite($fp, $code);
			fclose($fp);
		}
	}


	function safe_mkdir($dir) {
		if ($dir{0} != '.' && $dir{0} != '/') $dir = getcwd().'/'.$dir;

		if (!realpath($dir)) {
			if (strpos($dir, '/') !== false) {
				$path = explode('/', $dir);
				array_pop($path);
				safe_mkdir(join('/', $path));
			}
		}
		if (!file_exists(realpath("../$dir").'/'.$dir)) {
			echo "Create directory: $dir\n";
			$ok = mkdir(realpath("../$dir").'/'.$dir);
			if (!$ok) error("Failed to create: $dir");
			return $dir;
		}
	}





#	function __autoload($class_name) {
#		$class_name = ucfirst($class_name);
#		require_once("$class_name.php");
#	}
		
?>

